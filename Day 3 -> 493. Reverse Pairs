void merge(vector<int> &nums,int low,int mid,int high){
        int i=low,j=mid+1;
        vector<int> temp;
        while(i<=mid && j<=high){
            if(nums[i]<=nums[j]){
                temp.push_back(nums[i]);
                i++;
            }
            else{
                temp.push_back(nums[j]);
                j++;
            }
        }
        while(i<=mid) temp.push_back(nums[i++]);
        while(j<=high) temp.push_back(nums[j++]);
        for(int i=low;i<=high;i++){
            nums[i]=temp[i-low];
        }
    }
    int countPairs(vector<int>& nums,int low,int mid,int high){
        int j=mid+1;
        int count=0;
        for(int i=low;i<=mid;i++){
            while(j <= high && nums[i] > 2*(long long)nums[j]) j++;
            count+=(j-(mid+1));
        }
        return count;
    }
    int ms(vector<int>& nums,int low,int high){
        int count=0;
        if(low>=high) return count;
        int mid=(low+high)/2;
        count+=ms(nums,low,mid);
        count+=ms(nums,mid+1,high);
        count+=countPairs(nums,low,mid,high);
        merge(nums,low,mid,high);
        return count;
    }
    int reversePairs(vector<int>& nums) {
       return ms(nums,0,nums.size()-1);
        //return count;
    }

