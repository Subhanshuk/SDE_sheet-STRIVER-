--------------------------------------------------------------------NAIVE APPROACH--------------------------------------------------------------------------------------
bool isPalindrome(ListNode* head) {
        vector<int> temp;
        ListNode* curr=head;
        while(curr!=NULL){
            temp.push_back(curr->val);
            curr=curr->next;
        }
        int i=0,j=temp.size()-1;
        while(i<j){
            if(temp[i]==temp[j]){
                i++;
                j--;
            }
            else return false;
        }
        return true;
    }

-------------------------------------------------------------------OPTIMAL APPROACH--------------------------------------------------------------------------------------
ListNode* rev(ListNode* head){
        ListNode* prev=NULL;
        ListNode* nxt=NULL;
        while(head!=NULL){
            nxt=head->next;
            head->next=prev;
            prev=head;
            head=nxt;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL) return true;

        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        
        slow->next=rev(slow->next);
        slow=slow->next;

        while(slow!=NULL){
            if(slow->val != head->val) return false;
            slow=slow->next;
            head=head->next;
        }
        return true;
    }


